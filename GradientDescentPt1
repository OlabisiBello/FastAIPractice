!pip install fastai -q --upgrade
from fastai.basics import *
from fastai.vision.all import *
from fastai.callback.all import *
x = torch.arange(0,20,0.2).float()
y = (3*x + 20) + torch.randint(1,20,(100,))
#plt.scatter(x,y)
def linear (x, params):
    m,b = params
    return m*x + b
def rmse_loss(preds, actuals):
    return ((preds-actuals)**2).mean().sqrt()
params = torch.randn(2).requires_grad_()
lr = 1e-1  #try different learning rates
def apply_step(params):
    preds = linear(x, params)
    loss = rmse_loss(preds, y)
    loss.backward()
    params.data -= lr * params.grad.data
    params.grad = None
    #print(loss.item()) #feel free to uncomment this line if you don't want to see the loss for all the epochs
    return preds
for i in range(300):
      apply_step(params)     
      
#You can use this to compare your predictions to the actual y values at the start
def show_preds(preds, ax=None):
    if ax is None: ax=plt.subplots()[1]
    ax.scatter(x, y)
    ax.scatter(x, to_np(preds), color='red')
    ax.set_ylim(-30,100)  
show_preds(apply_step(params))


